generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  TeamMembers TeamMember[]
  Comments Comment[]
}


model Team {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  TeamMembers TeamMember[]
  Projects Project[]
}

model TeamMember {
  id Int @id @default(autoincrement())
  userId Int
  teamId Int

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Project {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String @db.VarChar(255)
  teamId Int

  team Team @relation(fields: [teamId], references: [id])

  Tasks Task[]
}

model Task {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255)
  description String @db.VarChar(255)
  isCompleted Boolean @default(false)
  projectId Int

  project Project @relation(fields: [projectId], references: [id])

  taskAssignees TaskAssignee[]
  comments Comment[]
}

model TaskAssignee {
  id Int @id @default(autoincrement())
  taskId Int
  teamMemberId Int

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Comment {
  id Int @id @default(autoincrement())
  content String @db.VarChar(255)
  taskId Int
  userId Int

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}